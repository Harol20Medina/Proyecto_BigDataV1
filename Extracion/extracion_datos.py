# -*- coding: utf-8 -*-
"""Extracion_Datos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qDo_Pycf_82ZmNMCsbaqGKsjQefYW-eu

**ðŸš€EXTRACCIÃ“N DE DATOS DESDE GOOGLE SHEETS (EXCEL VIRTUAL)**


**Proyecto: Seguridad Operativa mediante GPS (Empresa: Transportes El Lorito)**

Instalar la librerÃ­a pandas (opcional en Google Colab, pero lo incluimos por compatibilidad)
"""

!pip install --quiet gspread pandas gspread_dataframe

"""Nota:

AutenticaciÃ³n con Google (solo necesario si no usas un archivo pÃºblico):

Si el archivo es pÃºblico, puedes acceder con gspread sin autenticaciÃ³n compleja.

CELDA 1 â€“ CÃ³digo base general (solo ejecutar una vez al inicio)
"""

# Importamos la librerÃ­a pandas, que permite trabajar con datos en forma de tablas (DataFrames)
import pandas as pd

# Definimos el ID Ãºnico del archivo de Google Sheets
sheet_id = "1HBwyjBG0zH1AGpIXnKyFC26rGhSsIOF744vc6aSjfLE"

# Creamos una funciÃ³n para leer, mostrar y analizar una hoja especÃ­fica del documento
def analizar_hoja(nombre_hoja, gid):
    """
    Esta funciÃ³n realiza:
    1. Construye el enlace CSV de exportaciÃ³n a partir del ID de hoja (gid)
    2. Lee el contenido como un DataFrame de pandas
    3. Muestra todos los datos completos de la hoja
    4. Muestra anÃ¡lisis bÃ¡sico como:
       - Total de filas y columnas
       - Nombres de las columnas
       - Tipo de datos por columna
       - Cantidad de valores faltantes por columna
    """

    # Construimos la URL directa para exportar la hoja como CSV
    url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv&gid={gid}"

    # Leemos los datos desde la URL en formato CSV
    df = pd.read_csv(url)

    # Encabezado visual para identificar la hoja
    print("="*100)
    print(f"ðŸ“‹ HOJA: {nombre_hoja}")
    print("="*100)

    # Mostramos todos los datos completos (Google Colab los puede visualizar con display)
    print("ðŸ”¹ Todos los datos:")
    display(df)

    # Mostramos dimensiones: cuÃ¡ntas filas y columnas tiene
    print(f"\nðŸ”¹ Filas: {df.shape[0]} | Columnas: {df.shape[1]}")

    # Mostramos el nombre de cada columna
    print("ðŸ”¹ Columnas:", list(df.columns))

    # Mostramos el tipo de dato de cada columna (texto, nÃºmero, fecha, etc.)
    print("\nðŸ”¹ Tipos de datos:")
    print(df.dtypes)

    # Mostramos cuÃ¡ntos valores vacÃ­os hay por columna
    print("\nðŸ”¹ Valores nulos por columna:")
    print(df.isnull().sum())

"""âœ… CELDAS SIGUIENTES â€“ Una por cada hoja

ðŸ“„ Cronograma
"""

analizar_hoja("Cronograma", "1002874041")

"""ðŸ“„ Rutas"""

analizar_hoja("Rutas", "0")

"""ðŸ“„ Buses"""

analizar_hoja("Buses", "1857142461")

"""ðŸ“„ Falta"""

analizar_hoja("Falta", "1817979550")

"""ðŸ“„ Inspector"""

analizar_hoja("Inspector", "540056938")

"""ðŸ“„ Operador"""

analizar_hoja("Operador", "2013202462")

"""ðŸ“„ Paradero"""

analizar_hoja("Paradero", "1205843695")

"""ðŸ“„ Sanciones"""

analizar_hoja("Sanciones", "511629238")

"""ðŸ“„ Sentido"""

analizar_hoja("Sentido", "1534440589")

"""ðŸ“„ Detalle_sancion2024"""

analizar_hoja("Detalle_sancion2024", "351620038")

"""ðŸ“„ Bd_Faltas2024"""

analizar_hoja("Bd_Faltas2024", "177512124")

"""Fuente 2: MongoDB (NoSQL)"""

!pip install pymongo --quiet

""" Estrategias de Limpieza"""

